package ug.ktomczyk.techut.zad02.service;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ug.ktomczyk.techut.zad02.domain.Phone;

public class PhoneService {

	private final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
    private final Connection connection;
    private final Statement statement;
    private final String CREATE_TABLE_SQL = "CREATE TABLE Phone (id bigint GENERATED BY DEFAULT AS IDENTITY, producer VARCHAR(30), price DOUBLE, productionDate DATE, isReserved BOOLEAN)";
    private boolean tableExists = false;
    
    private PreparedStatement addPhoneStmt;
    private PreparedStatement getAllPhonesStmt;
    private PreparedStatement getPhoneByIdStmt;
    private PreparedStatement deleteAllPhonesStmt;
    private PreparedStatement deletePhoneByIdStmt;

    public PhoneService() throws SQLException {
        connection = DriverManager.getConnection(URL);
        statement = connection.createStatement();

        ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

        while (rs.next()) {
            if ("Phone".equalsIgnoreCase(rs.getString("table_name"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists) {
            statement.executeUpdate(CREATE_TABLE_SQL);
        }
        
        addPhoneStmt = connection.prepareStatement("INSERT INTO Phone (producer, price, productionDate, isReserved) VALUES (?,?,?,?)");
        getAllPhonesStmt = connection.prepareStatement("SELECT * FROM Phone");
        getPhoneByIdStmt = connection.prepareStatement("SELECT * FROM Phone WHERE ID=?");
        deleteAllPhonesStmt = connection.prepareStatement("DELETE FROM Phone");
        deletePhoneByIdStmt = connection.prepareStatement("DELETE FROM Phone WHERE ID=?");
    }
    
    public void addPhone(Phone phone) {
    	try {
    		addPhoneStmt.setString(1, phone.getProducer());
    		addPhoneStmt.setDouble(2, phone.getPrice());
    		addPhoneStmt.setDate(3, phone.getProductionDate());
    		addPhoneStmt.setBoolean(4, phone.isReserved());
    		
    		addPhoneStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    }
    
    public List<Phone> getAllPhones() {
    	List<Phone> guitars = new ArrayList<Phone>();
    	try {
    		ResultSet rs = getAllPhonesStmt.executeQuery();
    		
    		while (rs.next() ) {
    			Phone newPhone = new Phone(rs.getString("producer"),
    					rs.getDouble("price"), rs.getDate("productionDate"), rs.getBoolean("isReserved"));
    			guitars.add(newPhone);
    		}
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    	
    	return guitars;
    }
    
    public Phone getPhoneById(int id) {
		Phone newPhone = new Phone();
    	try {
    		getPhoneByIdStmt.setInt(1, id);
    		ResultSet rs = getPhoneByIdStmt.executeQuery();
    		
    		while (rs.next()) {
    			newPhone = new Phone(rs.getString("producer"),
    					rs.getDouble("price"), rs.getDate("productionDate"), rs.getBoolean("isReserved"));
    		}
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    	
    	return newPhone;
    }
    
    public void deleteAllPhones() {
    	try {
    		deleteAllPhonesStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    }
    
    public void deletePhoneById(int id) {
    	try {
    		deletePhoneByIdStmt.setInt(1, id);
    		deletePhoneByIdStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
}
}

